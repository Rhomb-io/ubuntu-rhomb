------------------------------
Ubuntu setup for rhomb devices
------------------------------
This is pakcage to build and install ubuntu filesystem on rhomb devices.
-------------
Prerequisites
-------------
For ubuntu installation use SD card having atleast 16GB capacity.
To use ubuntu pakcage machine should have atleast 15GB free space available. 

Please delete all the partitions in SD card before using it for flashing.
------------------
Build Instructions
------------------
1) Run below command
   # sudo ./build.sh all
   This command will take little long for the first time run as it downloads
   all the packages and then compile. It will generated zImage (dtb appended )
   and ubuntu.tgz in "<ubuntu-rhomb>/output/images/".

   If user is using this package first time it is mandatory to run 
   "sudo ./build.sh all" command. 

2) To rebuild linux kernel.
   # sudo ./build.sh linux
   This command rebuild linux kernel with latest chagnes and install kernel
   image (zImage with dtb appended) in "<buidroot_rhomb>/output/images/".

3) To rebuild u-boot
   # sudo ./build.sh uboot
   This command rebuild uboot with latest chagnes and install uboot image
    in "<buidroot_rhomb>/output/images/".

4) To build ubuntu filesystem.
   # sudo ./build.sh ubuntu

5) To get help of the 'build.sh' script
   # sudo ./build.sh help

--------------------
Install instructions
--------------------
1) There is one more script 'prepare_sd.sh'. This scripts flashes all the required 
   binaries to boot from SD card having ubuntu filesystem. 
   run 'prepare_sd.sh' script:
   # sudo ./prepare_sd.sh <SD Reader's device file>
   example <SD Reader's device file> : sdb, mmcblk0, sdd, sdc etc
   Once SD card is prepared user need to set board for SD bootmode.
   Insert prepared SD card and power on board.

2) For EMMC flashing user need to first follow build instructions and boot
   from SD card as instructed in above step 1 of install instructions. Once
   board is booted from SD card user need to login. "rhomb login: " prompt
   by entering
   user name : rhomb
   password  : rhomb

3) After that apply below commands.
   # cd /opt/
   # sudo tar -xzvf images.tgz --warning=no-timestamp
   # cd images
   # sudo ./emmc_fusing.sh mmcblk1
        (This script will ask user if "/dev/mmcblk1p1" already formated with
	ext4 filesystem as below)

        /dev/mmcblk1p1 contains a ext4 file system
                last mounted on / on Thu Jan  1 00:00:02 1970
        Proceed anyway? (y,N)
        Enter 'y' if it asked first time.
        For next time onwards user can enter 'N'
4) At the end of above command below messages will be printed
        eMMC flashed
        Power off the board
        Set emmc boot mode boot board
        Good luck!
5) User need to set board in EMMC bootmode to boot board from EMMC.
6) Once user set board in EMMC bootmode and power on board board will boot from eMMC

NOTE: In case of booting from eMMC we have seen that sometimes it failed to display GUI
on HDMI screen. In that case login into board and apply below commands. This is one time
command you won't face issue after that.

# sudo dpkg-reconfigure lightdm
# sudo /etc/init.d/lightdm restart

-----------------------------------
Creating and installing image files
-----------------------------------
NOTE: Script used in below command uses loopback device to create sd card image.
      For that linux machine should support patitioning on loopback device.
      Please go through below instructions carefully before applying below
      command.
-------------
Prerequisites
-------------
   a) Your machine must have alteast 15GB free space.

   b) Check how many maximum partition are allowed for loop device.
      # cat /sys/module/loop/parameters/max_part
        If it's 0, apply below command to increase it.

        # modprobe -r loop # unload the module
        # modprobe loop max_part=31

   c) To make this setting persistent, add the following line to /etc/modprobe.conf or
      to a file in /etc/modprobe.d if that directory exists on your system:
      options loop max_part=31

   d) If modprobe -r loop fails because “Module loop is builtin”, you'll need to add
      loop.max_part=31  to your kernel command line and reboot. If your bootloader
      is Grub2, add to it to the value of  GRUB_CMDLINE_LINUX in /etc/default/grub
      example:
      GRUB_CMDLINE_LINUX="loop.max_part=31"

    e) After adding it apply below command
       # update-grub
    f) Reboot your PC.

    g) After rebooting verify weather grub change has changes value of loop max_part.
       # cat /sys/module/loop/parameters/max_part
        (it should now display '31' instead of '0')
        or
       # cat /proc/cmdline
        example output:
        BOOT_IMAGE=/vmlinuz-3.13.0-32-generic root=UUID=bb206250-76b6-4a7b-b6d0-acd15596d597 ro loop.max_part=31 quiet splash vt.handoff=7
        Here loop.max_part=31 is appended it commandline.
    h) Now you are ready to run below script.

--------------------
Install instructions
--------------------
1. This package also contains scripts to create ubuntu image. In which single
   image contains everything.
2. To create image for sd card use below command.
   # sudo ./prepare_sd_image.sh <SD Reader's device file>

   That's it! It will create and install single image file in SD card.
   Once SD card is prepared user need to set board for SD bootmode.
   Insert prepared SD card and power on board.
3. You can find "ubuntu_sd.img" in "<ubuntu_rhomb>/output/images" directory.

Note: This is single ubuntu image file contains everything to create bootable
      SD card.
